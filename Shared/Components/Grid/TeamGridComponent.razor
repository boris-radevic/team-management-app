@using System.Text.Json
@using TeamManagementApp.Models
@using Services.Contracts
@using Microsoft.AspNetCore.Components.QuickGrid
@using TeamManagementApp.Shared.Components.Grid

@inject HttpClient Http
@inject IHierarchyService HierarchyService

<div class="w-full overflow-y-scroll">
    <QuickGrid Class="w-full" Items="VisibleNodes.AsQueryable()">
        <TemplateColumn Class="w-1/12" Context="node">
            @if (node.Children != null && node.Children.Any())
            {
                <button @onclick="() => ToggleExpand(node)">
                    @(node.IsExpanded ? "⮟" : "⮞")
                </button>
            }
        </TemplateColumn>
        <TemplateColumn Class="w-5/12" Context="node" Title="Name">
            @if (NodeNameColumnComponentMap.TryGetValue(node.Type, out var componentType))
            {
                <DynamicComponent Type="componentType" Parameters="new Dictionary<string, object> { { nameof(TeamNameComponent.Node), node } }" />
            }
            else
            {
                <div>@node.Title</div>
            }
        </TemplateColumn>
        <TemplateColumn Class="w-2/12" Context="node" Title="Position">
            @if (node.Type == "Position")
            {
                <div>@node.Title</div>
            }
            @if(node.Type == "PositionDefinition" && node.AdditionalData!=null){
                var addData = (PositionDefinitionAdditionalData)node.AdditionalData;
                <div>@addData.FilledCount / @addData.TotalCount</div>
            }
        </TemplateColumn>
        <TemplateColumn Class="w-2/12" Context="node" Title="Status">
                @RenderStatus(node)
        </TemplateColumn>
        <TemplateColumn Class="w-2/12" Context="node" Title="Actions">
                @RenderActions(node)
        </TemplateColumn>
    </QuickGrid>

</div>

   


@code {
    private List<GridNode> Nodes { get; set; } = new();
    private List<GridNode> VisibleNodes { get; set; } = new();

    private static readonly Dictionary<string, Type> NodeNameColumnComponentMap = new(){
        {"Team",typeof(TeamNameComponent)},
        {"Position",typeof(PositionNameComponent)}
    };

    private RenderFragment RenderStatus(GridNode node) => builder =>
    {
        if (node.Type == "Position" && node.AdditionalData is PositionAdditionalData addData)
        {
            builder.OpenElement(0, "div");
            builder.AddContent(1, addData.Status == 2 ? "Assigned" : "Created");
            builder.CloseElement();
        }
    };

    private RenderFragment RenderActions(GridNode node) => builder =>
    {
        if (node.Type == "Position" && node.AdditionalData is PositionAdditionalData addData)
        {
            builder.OpenElement(0, "div");
            var style = "color: green;";
            builder.AddAttribute(1, "style", style);
            builder.AddContent(2, addData.Status == 2 ? "Invite" : "Assign person");
            builder.CloseElement();
        }
    };

    protected override async Task OnInitializedAsync()
    {
        var jsonData = await Http.GetFromJsonAsync<Data>("data.json");
        if (jsonData != null)
        {
            Nodes = HierarchyService.ConvertToGridNodes(jsonData);
        }
        UpdateVisibleNodes();
    }


    private void ToggleExpand(GridNode node)
    {
        node.IsExpanded = !node.IsExpanded;
        UpdateVisibleNodes();
    }

    private List<GridNode> GetVisibleNodes(List<GridNode> nodes)
    {
        var result = new List<GridNode>();
        foreach (var node in nodes)
        {
            result.Add(node);

            if (node.IsExpanded && node.Children?.Any() == true)
            {
                result.AddRange(GetVisibleNodes(node.Children));
            }
        }
        return result;
    }

    private void UpdateVisibleNodes()
    {
        VisibleNodes = GetVisibleNodes(Nodes);
    }
}